#!/bin/bash
#SBATCH --job-name=CELE_map_flo
#SBATCH --mem-per-cpu=5G
#SBATCH -n 6
#SBATCH -c 2
#SBATCH --output=CELE_map_flo_output.txt
#SBATCH --error=CELE_map_flo_error.txt

#load needed softwares
module load Bowtie2
module load SAMtools

#define directories
maindir="/home/mlegue"
sourcedir="$maindir/source"
readdir="$maindir/read"
bamdir="$maindir/bam"
trackdir="$maindir/tracks"
countsdir="$maindir/counts"
resultsdir="$maindir/results"

#create directories if non existent
if [ ! -d $sourcedir ]; then
        mkdir -p $sourcedir
fi
if [ ! -d $readdir ]; then
        mkdir -p $readdir
fi
if [ ! -d $bamdir ]; then
        mkdir -p $bamdir
fi
if [ ! -d $trackdir ]; then
        mkdir -p $trackdir
fi
if [ ! -d $countsdir ]; then
        mkdir -p $countsdir
fi
if [ ! -d $resultsdir ]; then
        mkdir -p $resultsdir
fi

#set location of raw data
raw_dir="/home/mlegue/Samples_ready"

#get reference genome and (own)annotations
scp /home/mlegueGenomes/c_elegans.PRJNA13758.WS267.genomic.fa $sourcedir/celegans.fa
scp /home/mlegue/Genomes/CELE_gff.gff $sourcedir/celegans.gff
#for other references use cat /genomes/c_elegans.PRJNA13758.WS256.annotations.gff3_ncf | awk 'BEGIN{OFS="\t"};{print $1, $2, "ncRNA", $4, $5, $6, $7, $8, $9}' > $sourcedir/celegans.gff3

#variable for reference genome and annotations
refCelegans="$sourcedir/celegans.fa"
gffCelegans="$sourcedir/celegans.gff"

#sample names
samplelist="S10_OP50postPAO1_F4_seq1 S13_PAO1_F5_seq1 S17_PAO1_F6_seq1 S20_OP50control_FX_seq1 S5_PAO1_F2_seq1 S10_OP50postPAO1_F4_seq3 S14_PAO1_F5_seq1 S17_PAO1_F6_seq3 S21_OP50control_FX_seq1 S6_PAO1_F2_seq1
S11_OP50postPAO1_F4_seq1 S14_PAO1_F5_seq3 S18_PAO1_F6_seq1 S21_OP50control_FX_seq3 S7_OP50postPAO1_F3_seq1 S11_OP50postPAO1_F4_seq3 S15_PAO1_F5_seq1 S18_PAO1_F6_seq3 S2_PAO1_F1_seq1 S8_OP50postPAO1_F3_seq1
S12_OP50postPAO1_F4_seq1 S15_PAO1_F5_seq3 S19_OP50control_FX_seq1 S3_PAO1_F1_seq1 S9_OP50postPAO1_F3_seq1 S12_OP50postPAO1_F4_seq3 S16_PAO1_F6_seq1 S1_PAO1_F1_seq1 S4_PAO1_F2_seq1"

#trimming and cutadapt is ready in Samples_ready folder. Just unzip files and place in read folder.
for i in $samplelist
do
  sample_input="$raw_dir/${i}.fastq.gz"
  sample_output="$readdir/${i}_cut.fastq"
zcat $sample_input > $sample_output

#mapping
ref=$refCelegans

#indexing of reference file with bowtie
#bowtie2-build -f $ref $sourcedir/CELE_F1F6 #index CELE_F1F6 is ready
scp /home/marcela/Index/*.bt2 $sourcedir/

#prepare Bowtie2 input and output
for i in $samplelist
  do reads="$readdir/${i}.fastq"
     sorted="$bamdir/${i}_sorted"

#bowtie2: map reads in fastq format to reference genome. the quality score of the reads is encoded in phred33. Doesn't report reads that can map in more than one place on the genome. Allow 1 mismatched nucleotides in seed alignment (seed set to 17 as it is the length of the smallest read we filtered (default is 20)). The seed interval (how separated are seeds taken from one read) is calculated as f(x) = 0 + 2.5 * sqrt(x), where x is the read length (roughly two seeds per reads as reads are 36 or smaller). These seeding parameters should enable a rapid mapping and little overlap is needed (I think) as reads are short. By default, 15% of ambiguous character per read is allowed. 
#test time for computing for  or two mismatches
 bowtie2 -q --phred33 -N 1 -L 17 -i S,0,2.50 -x $sourcedir/CELE_F1F6 -U $reads | samtools view -bSh - | samtools sort - $sorted
 
#prepare file for summary of mapping 
 mapped="$bamdir/${i}_align_summary.txt"
 samtools flagstat ${sorted}.bam > $mapped


 echo "do tracks\n";

  bam_fw="$bamdir/${i}_fw.bam"
  bam_re="$bamdir/${i}_re.bam"
  tmpbed_fw="$trackdir/${i}_fw_tmp.bed"
  tmpbed_re="$trackdir/${i}_re_tmp.bed"
  bed_fw="$trackdir/${i}_fw.bed"
  bed_re="$trackdir/${i}_re.bed"


  #read reverse strand, transcript on reverse strand
   samtools view -bh -f 16 ${sorted}.bam > $bam_re

  #read not on reverse strand, transcript on forward strand in genome
   samtools view -bh -F 16 ${sorted}.bam > $bam_fw

  #make bedfiles 
   genomeCoverageBed -ibam $bam_fw -bg -g $ref > $tmpbed_fw 
   genomeCoverageBed -ibam $bam_re -bg -g $ref > $tmpbed_re 

  #add track specifications 
   echo "track type=\"bedGraph\" name=\"transcript forward $i\" color=0,0,128 visiblity=full" > $bed_fw 
   cat $tmpbed_fw >> $bed_fw  
   sed -i 's/chrMtDNA/chrM/g'  $bed_fw 

   echo "track type=\"bedGraph\" name=\"transcript reverse $i\" color=128,0,0 visiblity=full" > $bed_re 
   cat $tmpbed_re >> $bed_re
   sed -i 's/chrMtDNA/chrM/g'  $bed_re 

   rm $tmpbed_fw $tmpbed_re $bam_fw $bam_re
 


done